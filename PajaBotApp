#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import random
import tkinter as tk
from tkinter import scrolledtext


# Characters with diacritics to reject (keeps behavior similar to original script)
DIACRITICS = set("ěščřžýáíéúůťňďĚŠČŘŽÝÁÍÉÚŮŤŇĎ")
INSULTS = ["negr", "pic", "vole", "prdel", "kokot", "kurv", "zmrd", "hovno","tux","debil"]

def has_diacritics(s: str) -> bool:
    return any(ch in DIACRITICS for ch in s)

def respond(odpoved: str) -> str:
    """
    Return a single string reply for the given raw user input (odpoved).
    This preserves the original lowercase/uppercase check behavior from your console bot.
    """
    odpoved = odpoved.strip()
    odpoved = odpoved.lower()
    if "martyn" in odpoved:
        return "Pája: Ne! Topytle! Ma tšečtina se vypařuje kdiz o nem mluvýš!"
    
    if "majkl" in odpoved:
        return "Pája: Ne! Dopytle! Mám zabrané všechno místo na disku!"
    
    if odpoved == "":
        return "Systém: Napiš něco prosím."

    # exact match greeting (preserve original behavior)
    if odpoved == "ahoj" or odpoved == "cus" or odpoved == "cau" or odpoved == "nazdar" or odpoved == "hello":
        return "Pája: " + odpoved.capitalize()

    # check diacritics on the original text
    if has_diacritics(odpoved):
        return "Systém: Prosím, piš Pájovi bez háčků a čárek."

    # require sentence terminator
    if "." not in odpoved and "!" not in odpoved and "?" not in odpoved:
        return "Systém: Prosím, ukonči větu tečkou, vykřičníkem nebo otazníkem."

    # create lowercase copy for word/substring checks
    low = odpoved.lower()

    # advice request
    if "dej" in low and "rad" in low and "ne" not in low:
        rada = random.randint(1, 3)
        if rada == 1:
            return "Pája: Když ti někdo život ničí,\n      usměj se a vem ho tyčí."
        elif rada == 2:
            return "Pája: Pokud zhubnout chceš, musíš\n      vykadit víc, než toho sníš."
        else:
            return "Pája: Mezitím co v noci spíš,\n      já vykrádám tvoji spíž."

    # insults -> original program broke out; in GUI we return insult reply and caller may disable input
    if any(word in low for word in INSULTS):
        return "Pája: Ty jsi ale hnusný sprosťák\n      s tebou se nebavím."

    # questions
    if "?" in odpoved:
        if "co" in low and "je" in low:
            return "Pája: To je něco, čemu nerozumím."
        elif "kolik" in low:
            return "Pája: Pět a půl."
        elif "kdo" in low:
            return "Pája: Karel."
        elif "jak" in low and not "jaky" in low and not "jaka" in low and not "jake" in low:
            return "Pája: Nějak."
        else:
            return "Pája: Na hloupé otázky jsou hloupé odpovědi.\n      Takže tohle je má odpověď:\n Když ryje krtek v dubnu, bude pršet v březnu."

    # fallback random replies
    cislo = random.randint(1, 3)
    if cislo == 1:
        return "Pája: No, to je super,\n      ale vůbec mě to nezajímá."
    elif cislo == 2:
        return "Pája: To je taková blbost,\n      že na to ani neodpovím."
    else:
        return "Pája: To je tak divná věta,\n      že mi úplně uvařila hlavu.\n      (kterou ani nemám)"


class PajaApp:
    def __init__(self, root):
        self.root = root
        root.title("Pája")
        root.resizable(False, False)
        self.root.iconphoto(False, tk.PhotoImage(file='pja.png'))
        

        self.chat = scrolledtext.ScrolledText(root, width=60, height=20, wrap=tk.WORD, state=tk.DISABLED)
        self.chat.grid(row=0, column=0, columnspan=2, padx=8, pady=8)

        self.entry = tk.Entry(root, width=50)
        self.entry.grid(row=1, column=0, padx=(8, 0), pady=(0, 8))
        self.entry.bind("<Return>", self.on_send)

        self.send_btn = tk.Button(root, text="Pošli", command=self.on_send)
        self.send_btn.grid(row=1, column=1, padx=(4, 8), pady=(0, 8))

        # initial greeting from the bot
        self.append_message("Pája: Co mi chceš říct?")

    def append_message(self, msg: str):
        self.chat.configure(state=tk.NORMAL)
        self.chat.insert(tk.END, msg + "\n\n")
        self.chat.see(tk.END)
        self.chat.configure(state=tk.DISABLED)

    def on_send(self, event=None):
        user_text = self.entry.get()
        if not user_text:
            return
        # show user message as-is
        self.append_message("Ty: " + user_text)
        self.entry.delete(0, tk.END)

        # pass the exact user input to respond (so islower() check works)
        reply = respond(user_text)
        self.append_message(reply)

        # emulate original program's 'break' when insults are used:
        if reply.startswith("Pája: Ty jsi ale hnusný sprosťák"):
            # either disable input so the conversation remains visible, or close the window:
            # disable input:
            self.entry.configure(state=tk.DISABLED)
            self.send_btn.configure(state=tk.DISABLED)
            # if you prefer the window to close instead, replace the two lines above with:
            # self.root.destroy()

def main():
    root = tk.Tk()
    app = PajaApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
